import re
import copy
from bs4 import BeautifulSoup
from weasyprint import HTML
from jinja2 import Environment, FileSystemLoader

def slugify(text):
    """
    Creates a URL-friendly "slug" from a string.
    """
    text = text.lower()
    text = re.sub(r'[\s_]+', '-', text)  # Replace spaces and underscores with hyphens
    text = re.sub(r'[^\w-]', '', text)    # Remove all non-word characters except hyphens
    return text.strip('-')

def create_pdf(html_content, template_path):
    """
    Generates a PDF from HTML content using a Jinja2 template.

    Args:
        html_content (str): The raw HTML content generated by the scenario generator.
        template_path (str): The path to the Jinja2 HTML template for the PDF.

    Returns:
        bytes: The generated PDF as a byte string.
    """
    # 1. Parse the incoming HTML
    soup = BeautifulSoup(html_content, 'html.parser')

    # 2. Extract title for the cover page
    title_tag = soup.find('h1')
    title_text = title_tag.get_text() if title_tag else 'Scenario'
    if title_tag:
        title_tag.decompose()  # Remove title from main content

    # 3. Reorder and filter sections for PDF
    sections = {}
    for h2 in soup.find_all('h2'):
        section_title = h2.get_text()
        content_parts = [h2]
        for sibling in h2.find_next_siblings():
            if sibling.name == 'h2':
                break
            content_parts.append(sibling)
        sections[section_title] = content_parts

    desired_order = [
        "Accroches Initiales", "Synopsis", "Contexte du Monde", "Antagoniste",
        "Découpage des Scènes", "Scènes Détaillées", "Personnages Non-Joueurs (PNJ)",
        "Lieux Importants", "Récapitulatif des Entrées Utilisateur"
    ]

    ordered_soup_div = BeautifulSoup("<div></div>", "html.parser").div
    for title in desired_order:
        if title in sections:
            for element in sections[title]:
                ordered_soup_div.append(copy.copy(element))

    for h2 in ordered_soup_div.find_all('h2'):
        h2['class'] = 'new-page'

    # 4. Build TOC from the ordered content
    toc_list = []
    headings = ordered_soup_div.find_all(['h2', 'h3'])
    for heading in headings:
        heading_id = slugify(heading.get_text())
        heading['id'] = heading_id
        level = int(heading.name[1])
        toc_list.append({"level": level, "text": heading.get_text(), "id": heading_id})

    toc_html = '<nav id="toc"><h2>Table des Matières</h2><ul>'
    for item in toc_list:
        style = 'margin-left: 2em;' if item['level'] == 3 else ''
        toc_html += f'<li style="{style}"><a href="#{item["id"]}">{item["text"]}</a></li>'
    toc_html += '</ul></nav>'

    # 5. Render the final HTML using the Jinja2 template
    # The path to the template is now configurable. We need to set up the Jinja env.
    template_dir = '.' # Assumes templates are in a subdir of the app root
    env = Environment(loader=FileSystemLoader(template_dir))
    template = env.get_template(template_path)

    final_html_content = str(ordered_soup_div)
    rendered_html = template.render(
        title=title_text,
        toc=toc_html,
        content=final_html_content
    )

    # 6. Generate the PDF from the rendered HTML
    pdf_bytes = HTML(string=rendered_html).write_pdf()

    return pdf_bytes
